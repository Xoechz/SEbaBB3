-- 1
SELECT s.MANAGER_STAFF_ID, s.STORE_ID, e.STAFF_ID, SUM(p.AMOUNT)
FROM PAYMENT p
INNER JOIN STAFF e
    ON p.STAFF_ID = e.STAFF_ID
INNER JOIN STORE s
    ON e.STORE_ID = s.STORE_ID
GROUP BY GROUPING SETS ( (s.MANAGER_STAFF_ID, s.STORE_ID, e.STAFF_ID ), ( s.MANAGER_STAFF_ID, s.STORE_ID), ( s.STORE_ID,
    e.STAFF_ID));

-- 2
-- Annahme: Das Land des Geschäftes ist gemeint und alle Kombinationen von Jahr, Land und Kategorie sollen angezeigt werden
SELECT f.RELEASE_YEAR, co.COUNTRY, c.NAME, COUNT(*), SUM(p.AMOUNT)
FROM FILM f
INNER JOIN FILM_CATEGORY fc
    ON f.FILM_ID = fc.FILM_ID
INNER JOIN CATEGORY c
    ON fc.CATEGORY_ID = c.CATEGORY_ID
INNER JOIN INVENTORY i
    ON f.FILM_ID = i.FILM_ID
INNER JOIN RENTAL r
    ON i.INVENTORY_ID = r.INVENTORY_ID
INNER JOIN PAYMENT p
    ON r.RENTAL_ID = p.RENTAL_ID
INNER JOIN STORE s
    ON i.STORE_ID = s.STORE_ID
INNER JOIN ADDRESS a
    ON s.ADDRESS_ID = a.ADDRESS_ID
INNER JOIN CITY ci
    ON a.CITY_ID = ci.CITY_ID
INNER JOIN COUNTRY co
    ON ci.COUNTRY_ID = co.COUNTRY_ID
WHERE c.NAME IN ('Family', 'Children', 'Travel')
GROUP BY GROUPING SETS ( (f.RELEASE_YEAR, co.COUNTRY, c.NAME), ( f.RELEASE_YEAR, co.COUNTRY),
    ( f.RELEASE_YEAR, c.NAME), ( co.COUNTRY, c.NAME), ( f.RELEASE_YEAR), ( co.COUNTRY), ( c.NAME), ())
ORDER BY co.COUNTRY;

-- 3
SELECT s.MANAGER_STAFF_ID, s.STORE_ID, SUM(p.AMOUNT)
FROM STORE s
INNER JOIN STAFF e
    ON s.STORE_ID = e.STORE_ID
INNER JOIN PAYMENT p
    ON e.STAFF_ID = p.STAFF_ID
GROUP BY CUBE (s.MANAGER_STAFF_ID, s.STORE_ID);

-- 4
-- laut DataGrip sollte man DECODE statt CASE verwenden, das führt aber meiner Meinung nach zu einem unleserlichen Statement
SELECT CASE GROUPING(s.MANAGER_STAFF_ID)
           WHEN 1 THEN 'All Managers'
           ELSE TO_CHAR(s.MANAGER_STAFF_ID)
    END AS MANAGER_STAFF_ID,
    CASE GROUPING(s.STORE_ID)
        WHEN 1 THEN 'All Stores'
        ELSE TO_CHAR(s.STORE_ID)
        END AS STORE_ID,
    SUM(p.AMOUNT)
FROM STORE s
INNER JOIN STAFF e
    ON s.STORE_ID = e.STORE_ID
INNER JOIN PAYMENT p
    ON e.STAFF_ID = p.STAFF_ID
GROUP BY CUBE (s.MANAGER_STAFF_ID, s.STORE_ID);