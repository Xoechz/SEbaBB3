-- row trigger example (before)

CREATE OR REPLACE TRIGGER Print_salary_changes
  BEFORE UPDATE ON Emp_tab
  FOR EACH ROW -- row trigger
WHEN (new.Empno > 0) -- (!) here without the ":" for new
DECLARE
    sal_diff number;
BEGIN
    sal_diff  := :new.sal  - :old.sal;
    dbms_output.put('Old salary: ' || :old.sal);
    dbms_output.put('  New salary: ' || :new.sal);
    dbms_output.put_line('  Difference ' || sal_diff);
END;
/

-- ===========================================================
-- row trigger example (after)
CREATE TABLE Emp_log (
   Emp_id     NUMBER, 
   Log_date   DATE,
   New_salary NUMBER, 
   Action     VARCHAR2(20));

CREATE OR REPLACE TRIGGER Log_salary_increase
  AFTER UPDATE ON Emp_tab
  FOR EACH ROW
  WHEN (new.Sal > 1000) -- (!) here without the ":" for new
BEGIN
    INSERT INTO Emp_log (Emp_id, Log_date, New_salary, Action)
       VALUES (:new.Empno, SYSDATE, :new.SAL, 'NEW SAL');
END;
/

-- ===========================================================
-- audits example

CREATE TABLE audits (
      audit_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      table_name       VARCHAR2(255),
      transaction_name VARCHAR2(10),
      by_user          VARCHAR2(30),
      transaction_date DATE
);

CREATE TABLE customers (
  customer_id NUMBER PRIMARY KEY,
  credit_limit NUMBER
);

/
INSERT INTO customers VALUES (10, 1000);
COMMIT;
/
CREATE OR REPLACE TRIGGER customers_audit_trg
    AFTER UPDATE OR DELETE ON customers
    FOR EACH ROW    
DECLARE
   l_transaction VARCHAR2(10);
BEGIN
   -- determine the transaction type
   l_transaction := CASE  
         WHEN UPDATING THEN 'UPDATE' -- INSERTING, UPDATING, DELETING are conditional predicates
         WHEN DELETING THEN 'DELETE'
   END;

   -- insert a row into the audit table   
   INSERT INTO audits (table_name, transaction_name, by_user, transaction_date)
   VALUES('CUSTOMERS', l_transaction, USER, SYSDATE);
END;
/

UPDATE customers SET credit_limit = 2000 WHERE customer_id = 10; -- fires the trigger and adds a row to the 'audits' table
COMMIT; -- ends transaction
